name: Cursor 代码评审

on:
  # 使用 pull_request_target 以访问 secrets
  # 但添加安全检查，只对可信任的贡献者自动运行
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # 第一步：安全检查
  security-check:
    name: 安全检查
    runs-on: ubuntu-latest
    outputs:
      is_safe: ${{ steps.check.outputs.is_safe }}
      author_association: ${{ steps.check.outputs.author_association }}
    steps:
      - name: 检查贡献者身份
        id: check
        run: |
          echo "作者关联: ${{ github.event.pull_request.author_association }}"

          # 允许的身份：OWNER（所有者）、MEMBER（成员）、COLLABORATOR（协作者）
          if [[ "${{ github.event.pull_request.author_association }}" == "OWNER" ]] || \
             [[ "${{ github.event.pull_request.author_association }}" == "MEMBER" ]] || \
             [[ "${{ github.event.pull_request.author_association }}" == "COLLABORATOR" ]]; then
            echo "✅ 可信任的贡献者，允许自动审查"
            echo "is_safe=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ 外部贡献者，需要手动批准"
            echo "is_safe=false" >> $GITHUB_OUTPUT
          fi
          echo "author_association=${{ github.event.pull_request.author_association }}" >> $GITHUB_OUTPUT

  # 第二步：代码审查（只对可信贡献者自动运行）
  code-review:
    name: 自动代码审查
    needs: security-check
    # 只对可信贡献者自动运行
    if: needs.security-check.outputs.is_safe == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 关键：检出 PR 的代码，而不是默认分支
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 安装 Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: 配置 Cursor 认证
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        run: |
          # 创建 Cursor 配置目录
          mkdir -p "$HOME/.cursor"

          # 验证 API Key 是否存在
          if [ -z "$CURSOR_API_KEY" ]; then
            echo "❌ 错误: CURSOR_API_KEY 未设置"
            echo "请在 GitHub 仓库的 Settings -> Secrets and variables -> Actions 中添加 CURSOR_API_KEY"
            exit 1
          fi

          echo "✅ Cursor API Key 已配置"

      - name: 执行代码审查
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          GH_TOKEN: ${{ github.token }}
          MODEL: "claude-4.5-sonnet"
          # 禁用交互式提示
          CI: true
          CURSOR_NO_INTERACTIVE: 1
        run: |
          echo "🚀 开始执行 Cursor 代码审查..."
          echo "📦 Model: $MODEL"

          # 检查 cursor-agent 是否可用
          if ! command -v cursor-agent &> /dev/null; then
            echo "❌ cursor-agent 命令未找到"
            exit 1
          fi

          cursor-agent --force --model "$MODEL" --output-format=text --print "你当前在 GitHub Actions runner 中执行自动化代码审查。gh CLI 可用并已通过 GH_TOKEN 认证。你可以在拉取请求上发表评论。

          上下文：
          - 仓库：${{ github.repository }}
          - PR 编号：${{ github.event.pull_request.number }}
          - PR Head SHA：${{ github.event.pull_request.head.sha }}
          - PR Base SHA：${{ github.event.pull_request.base.sha }}

          目标：
          1) 复核已有审查评论，若已处理则回复：已解决
          2) 审查当前 PR diff，仅标注明确且高严重度的问题
          3) 只在变更的行留下非常简短的行内评论（1-2 句），并在末尾给出简要总结

          流程：
          - 获取已有评论：gh pr view --json comments
          - 获取 diff：gh pr diff
          - 若先前报告的问题似乎已被附近的更改修复，回复：✅ 此问题似乎已被最近的更改解决
          - 避免重复：如果同类反馈已在相同行或附近存在，则跳过

          评论规则：
          - 最多 10 条行内评论；优先处理最关键的问题
          - 每条评论只包含一个问题；放在准确的变更行
          - 语气自然，具体且可执行；不要提及自动化或高置信度
          - 使用表情：🚨 严重 🔒 安全 ⚡ 性能 ⚠️ 逻辑 ✅ 已解决 ✨ 改进

          提交：
          - 提交一次审查，包含行内评论与简明总结
          - 仅使用：gh pr review --comment
          - 不要使用：gh pr review --approve 或 --request-changes"
